var _user$project$Main$stylesheet = A3(
	_elm_lang$html$Html$node,
	'link',
	{
		ctor: '::',
		_0: A2(_elm_lang$html$Html_Attributes$attribute, 'rel', 'stylesheet'),
		_1: {
			ctor: '::',
			_0: A2(_elm_lang$html$Html_Attributes$attribute, 'property', 'stylesheet'),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$html$Html_Attributes$attribute, 'href', 'style.css'),
				_1: {ctor: '[]'}
			}
		}
	},
	{ctor: '[]'});
var _user$project$Main$secondsPassed = F2(
	function (t, n) {
		return _elm_lang$core$Native_Utils.eq(
			A2(
				_elm_lang$core$Basics$rem,
				_elm_lang$core$Basics$round(
					_elm_lang$core$Time$inSeconds(t)),
				n),
			0);
	});
var _user$project$Main$thoughts = _elm_lang$core$Array$fromList(
	{
		ctor: '::',
		_0: 'Synthesizing a prioris...',
		_1: {
			ctor: '::',
			_0: 'Consulting microtubules...',
			_1: {
				ctor: '::',
				_0: 'Connecting to oracle...',
				_1: {
					ctor: '::',
					_0: 'Interacting with proof...',
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$numThoughts = _elm_lang$core$Array$length(_user$project$Main$thoughts);
var _user$project$Main$Model = F2(
	function (a, b) {
		return {state: a, thought: b};
	});
var _user$project$Main$Results = {ctor: 'Results'};
var _user$project$Main$Thinking = {ctor: 'Thinking'};
var _user$project$Main$Initial = {ctor: 'Initial'};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {state: _user$project$Main$Initial, thought: 0},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Check':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{state: _user$project$Main$Thinking}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Reset':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{state: _user$project$Main$Initial}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return (_elm_lang$core$Native_Utils.eq(model.state, _user$project$Main$Thinking) && A2(_user$project$Main$secondsPassed, _p0._0, 1)) ? (_elm_lang$core$Native_Utils.eq(model.thought, _user$project$Main$numThoughts - 1) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{state: _user$project$Main$Results}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{thought: model.thought + 1}),
					_1: _elm_lang$core$Platform_Cmd$none
				}) : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subs = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$Reset = {ctor: 'Reset'};
var _user$project$Main$Check = {ctor: 'Check'};
var _user$project$Main$gui = function (model) {
	var _p1 = model.state;
	switch (_p1.ctor) {
		case 'Initial':
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('buttons'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$placeholder('Enter the URL of the paper you\'d like to check'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Check),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Check'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			};
		case 'Thinking':
			var thought = A2(
				_elm_lang$core$Maybe$withDefault,
				'Synthesizing a prioris...',
				A2(_elm_lang$core$Array$get, model.thought, _user$project$Main$thoughts));
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$src('assets/spinner.gif'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(15),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$height(15),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('thoughts'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(thought),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			};
		default:
			return {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h2,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('NO'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('This paper does not, in fact, prove P = NP. A full report has been generated '),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$a,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$href('https://www.scottaaronson.com/blog/?p=304'),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('here'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html$text('.'),
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				}
			};
	}
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('container'),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					{
						ctor: '::',
						_0: _user$project$Main$stylesheet,
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$h1,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Has P = NP been solved yet?'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					_user$project$Main$gui(model))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('footer'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Made by '),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$a,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$href('twitter.com/adam_chal'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('@adam_chal'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html$text(', with apologies to '),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$a,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$href('https://www.scottaaronson.com/blog'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('Scott Aaronson'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html$text('. Source available '),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$a,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$href(''),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('here'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html$text('.'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subs})();
